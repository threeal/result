name: test
on:
  workflow_dispatch:
  push:
jobs:
  test-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3.2.0

      - name: Install LLVM and Ninja
        run: sudo apt install llvm ninja-build

      - name: Configure CMake
        run: cmake . -B build -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TESTING=ON

      - name: Build targets
        run: cmake --build build

      - name: Run unit tests
        run: ctest --verbose --test-dir build --no-compress-output -T Test || true

      - name: Download Testspace client
        run: curl -fsSL https://testspace-client.s3.amazonaws.com/testspace-linux.tgz | tar -zxvf- -C build

      - name: Configure Testspace client
        run: |
          build/testspace config url ${{ secrets.TESTSPACE_URL }}
          build/testspace config project ${{ secrets.TESTSPACE_PROJECT }}
          build/testspace config space ${{ github.ref_name }}

      - name: Send test result to Testspace
        run: build/testspace [Tests]"build/Testing/*/Test.xml"

      - name: Install gcovr
        run: pip3 install gcovr

      - name: Generate code coverage info
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: gcovr --gcov-executable 'llvm-cov gcov' -e 'build/*' --coveralls build/coverage.json

      - name: Send code coverage info to Coveralls
        run: curl -v -F json_file=@build/coverage.json https://coveralls.io/api/v1/jobs

  test-warning-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3.2.0

      - name: Install Ninja
        run: sudo apt install ninja-build

      - name: Configure CMake
        run: cmake . -B build -G Ninja -DCMAKE_CXX_FLAGS='-Werror' -DBUILD_TESTING=ON

      - name: Build targets
        run: cmake --build build

  test-formatting-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3.2.0

      - name: Install cmake-format
        run: pip3 install cmake-format

      - name: Configure CMake
        run: cmake . -B build

      - name: Check code formatting
        run: |
          cmake --build build --target format
          cmake --build build --target check-format
